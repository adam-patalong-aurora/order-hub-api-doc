{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"Witaj w bazie wiedzy!","text":"<p>Niniejsza baza wiedzy powsta\u0142a w czasie pokonywania \u015bcie\u017cki kariery w IT. Zawiera ona wiedz\u0119 zdobyt\u0105 podczas nauki, praktyczne porady oraz dzia\u0142aj\u0105ce rozwi\u0105zania poszczeg\u00f3lnych zagadnie\u0144.</p>"},{"location":"varnish/commands/","title":"Przydatne polecenia","text":""},{"location":"varnish/commands/#wejscie-w-bash-kontenera-varnisha","title":"Wej\u015bcie w bash kontenera varnisha","text":"<p>U\u017cywaj\u0105c terminala sprawd\u017a nazw\u0119 kontenera varnisha <pre><code>docker ps\n</code></pre></p> <p>Wej\u015bcie w bash varnisha</p> <pre><code>docker exec -ti magento246_varnish bash\n</code></pre>"},{"location":"varnish/commands/#dostepne-narzedzia","title":"Dost\u0119pne narz\u0119dzia","text":""},{"location":"varnish/commands/#varnishlog","title":"varnishlog","text":"<p>Pozwala na przegl\u0105danie log\u00f3w varnisha w czasie rzeczywistym.</p> <pre><code>varnishlog\n</code></pre>"},{"location":"varnish/commands/#varnishadm","title":"varnishadm","text":"<p>To narz\u0119dzie wiersza polece\u0144 do zarz\u0105dzania serwerem Varnish Cache. Umo\u017cliwia administratorom i u\u017cytkownikom Varnish interakcj\u0119 z serwerem Varnish poprzez wysy\u0142anie polece\u0144 administracyjnych. Mo\u017cna go u\u017cywa\u0107 do wykonywania r\u00f3\u017cnych zada\u0144, takich jak czyszczenie cache, \u0142adowanie i weryfikowanie plik\u00f3w konfiguracyjnych VCL (Varnish Configuration Language), monitorowanie stanu serwera i wiele innych. <pre><code>varnishadm\n</code></pre></p>"},{"location":"varnish/commands/#varnishstat","title":"varnishstat","text":"<p>To narz\u0119dzie wiersza polece\u0144 s\u0142u\u017c\u0105ce do monitorowania i wy\u015bwietlania statystyk serwera Varnish Cache w czasie rzeczywistym. Dostarcza szczeg\u00f3\u0142owe informacje o dzia\u0142aniu serwera, takie jak liczba \u017c\u0105da\u0144, cache hits, cache misses, wykorzystanie pami\u0119ci i inne wska\u017aniki wydajno\u015bci. <pre><code>varnishstat\n</code></pre></p>"},{"location":"varnish/commands/#varnishlist","title":"varnishlist","text":"<p>Varnishlist pozwala na zbieranie i wizualizacj\u0119 danych dotycz\u0105cych czasu odpowiedzi, op\u00f3\u017anie\u0144, trafie\u0144 i miss\u00f3w w cache. Umo\u017cliwia to identyfikowanie w\u0105skich garde\u0142 i problem\u00f3w z wydajno\u015bci\u0105. <pre><code>varnishlist\n</code></pre></p>"},{"location":"varnish/commands/#czyszczenie-cache","title":"Czyszczenie cache","text":"<p>Aby wyczy\u015bci\u0107 cache varnisha, nale\u017cy wys\u0142a\u0107 zapytanie <code>PURGE</code> na adres URL, kt\u00f3ry chcemy wyczy\u015bci\u0107.</p> <p>U\u017cywaj\u0105c terminala wprowad\u017a polecenie: <pre><code> curl -X PURGE -H 'X-Magento-Tags-Pattern: .*' http://domena.local\n</code></pre></p>"},{"location":"varnish/configuration/","title":"Konfiguracja","text":""},{"location":"varnish/configuration/#docker_composeyml","title":"docker_compose.yml","text":"<p>W swoim pliku <code>docker_compose.yml</code> dodaj Varnish jako us\u0142ug\u0119.</p> Uwaga <p>Upewnij si\u0119, \u017ce us\u0142uga Varnish nas\u0142uchuje na porcie <code>80:80</code>. Aby to tutaj przychodzi\u0142y zapytania przegl\u0105darki.</p> Uwaga <p>Ustaw nas\u0142uchiwanie nginx na port <code>8080:8080</code>.</p> Przyk\u0142ad konfiguracji pliku <code>docker_compose.yml</code> YML <pre><code>version: '3.5'\nservices:\n  varnish:\n    image: varnish:stable\n    container_name: ${PROJECT_PREFIX}_varnish\n    volumes:\n      - ./varnish/default.vcl:/etc/varnish/default.vcl\n    ports:\n      - \"80:80\"\n    environment:\n      - VARNISH_SIZE=2G\n    links:\n      - nginx\n\n  nginx:\n    image: nginx:latest\n    container_name: ${PROJECT_PREFIX}_nginx\n    ports:\n      - \"8080:8080\"\n      - 443:443\n    volumes:\n      - ${PROJECT_PATH}:${PROJECT_PATH}\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./nginx/magento.nginx.conf:/etc/nginx/magento.nginx.conf\n      - ./nginx/sites:/etc/nginx/conf.d/\n      - ./certs:/etc/nginx/certs/\n    links:\n      - php\n      - php_xdebug\n</code></pre>"},{"location":"varnish/configuration/#varnishdefaultvcl","title":"varnish/default.vcl","text":"<p>W katalogu dockera <code>varnish</code> utw\u00f3rz plik <code>default.vcl</code> z konfiguracj\u0105 Varnish.</p> <p>Konfiguracj\u0119 mo\u017cesz wygenerowa\u0107 przez Panel Administracyjny Magento 2.  Wchodzisz w <code>Stores</code> -&gt; <code>Configuration</code> -&gt; <code>Advanced</code> -&gt; <code>System</code> -&gt; <code>Full Page Cache</code> -&gt; <code>Varnish Configuration</code>  i klikasz <code>Export VCL for Varnish 5</code>.</p> Uwaga <p>Ustaw backend varnisha na <code>nginx</code> port <code>8080:8080</code>.</p> Uwaga <p>Aby umo\u017cliwi\u0107 czyszczenie ustaw <code>acl purge</code> oraz <code>req.method == \"PURGE\"</code>.</p> Przyk\u0142ad konfiguracji pliku <code>default.yml</code> VCL <pre><code># VCL version 5.0 is not supported so it should be 4.0 even though actually used Varnish version is 6\nvcl 4.1;\n\nimport std;\n# The minimal Varnish version is 6.0\n# For SSL offloading, pass the following header in your proxy server or load balancer: 'X-Forwarded-Proto: https'\n\nbackend default {\n    .host = \"nginx\";\n    .port = \"8080\";\n    .first_byte_timeout = 600s;\n    .probe = {\n        .url = \"/health_check.php\";\n        .timeout = 2s;\n        .interval = 5s;\n        .window = 10;\n        .threshold = 5;\n   }\n}\n\nacl purge {\n    \"localhost\";\n    \"127.0.0.1\";\n    \"nginx\";\n}\n\nsub vcl_recv {\n    if (req.restarts &gt; 0) {\n        set req.hash_always_miss = true;\n    }\n\n    if (req.method == \"PURGE\") {\n        if (client.ip !~ purge) {\n            #return (synth(405, \"Method not allowed\"));\n        }\n        # To use the X-Pool header for purging varnish during automated deployments, make sure the X-Pool header\n        # has been added to the response in your backend server config. This is used, for example, by the\n        # capistrano-magento2 gem for purging old content from varnish during it's deploy routine.\n        if (!req.http.X-Magento-Tags-Pattern &amp;&amp; !req.http.X-Pool) {\n            return (synth(400, \"X-Magento-Tags-Pattern or X-Pool header required\"));\n        }\n        if (req.http.X-Magento-Tags-Pattern) {\n          ban(\"obj.http.X-Magento-Tags ~ \" + req.http.X-Magento-Tags-Pattern);\n        }\n        if (req.http.X-Pool) {\n          ban(\"obj.http.X-Pool ~ \" + req.http.X-Pool);\n        }\n        return (synth(200, \"Purged\"));\n    }\n\n    if (req.method != \"GET\" &amp;&amp;\n        req.method != \"HEAD\" &amp;&amp;\n        req.method != \"PUT\" &amp;&amp;\n        req.method != \"POST\" &amp;&amp;\n        req.method != \"TRACE\" &amp;&amp;\n        req.method != \"OPTIONS\" &amp;&amp;\n        req.method != \"DELETE\") {\n          /* Non-RFC2616 or CONNECT which is weird. */\n          return (pipe);\n    }\n\n    # We only deal with GET and HEAD by default\n    if (req.method != \"GET\" &amp;&amp; req.method != \"HEAD\") {\n        return (pass);\n    }\n\n    # Bypass customer, shopping cart, checkout\n    if (req.url ~ \"/customer\" || req.url ~ \"/checkout\") {\n        return (pass);\n    }\n\n    # Bypass health check requests\n    if (req.url ~ \"^/(pub/)?(health_check.php)$\") {\n        return (pass);\n    }\n\n    # Set initial grace period usage status\n    set req.http.grace = \"none\";\n\n    # normalize url in case of leading HTTP scheme and domain\n    set req.url = regsub(req.url, \"^http[s]?://\", \"\");\n\n    # collect all cookies\n    std.collect(req.http.Cookie);\n\n    # Compression filter. See https://www.varnish-cache.org/trac/wiki/FAQ/Compression\n    if (req.http.Accept-Encoding) {\n        if (req.url ~ \"\\.(jpg|jpeg|png|gif|gz|tgz|bz2|tbz|mp3|ogg|swf|flv)$\") {\n            # No point in compressing these\n            unset req.http.Accept-Encoding;\n        } elsif (req.http.Accept-Encoding ~ \"gzip\") {\n            set req.http.Accept-Encoding = \"gzip\";\n        } elsif (req.http.Accept-Encoding ~ \"deflate\" &amp;&amp; req.http.user-agent !~ \"MSIE\") {\n            set req.http.Accept-Encoding = \"deflate\";\n        } else {\n            # unknown algorithm\n            unset req.http.Accept-Encoding;\n        }\n    }\n\n    # Remove all marketing get parameters to minimize the cache objects\n    if (req.url ~ \"(\\?|&amp;)(gclid|cx|ie|cof|siteurl|zanpid|origin|fbclid|mc_[a-z]+|utm_[a-z]+|_bta_[a-z]+)=\") {\n        set req.url = regsuball(req.url, \"(gclid|cx|ie|cof|siteurl|zanpid|origin|fbclid|mc_[a-z]+|utm_[a-z]+|_bta_[a-z]+)=[-_A-z0-9+()%.]+&amp;?\", \"\");\n        set req.url = regsub(req.url, \"[?|&amp;]+$\", \"\");\n    }\n\n    # Static files caching\n    if (req.url ~ \"^/(pub/)?(media|static)/\") {\n        # Static files should not be cached by default\n        return (pass);\n\n        # But if you use a few locales and don't use CDN you can enable caching static files by commenting previous line (#return (pass);) and uncommenting next 3 lines\n        #unset req.http.Https;\n        #unset req.http.X-Forwarded-Proto;\n        #unset req.http.Cookie;\n    }\n\n    # Bypass authenticated GraphQL requests without a X-Magento-Cache-Id\n    if (req.url ~ \"/graphql\" &amp;&amp; !req.http.X-Magento-Cache-Id &amp;&amp; req.http.Authorization ~ \"^Bearer\") {\n        return (pass);\n    }\n\n    return (hash);\n}\n\nsub vcl_hash {\n    if ((req.url !~ \"/graphql\" || !req.http.X-Magento-Cache-Id) &amp;&amp; req.http.cookie ~ \"X-Magento-Vary=\") {\n        hash_data(regsub(req.http.cookie, \"^.*?X-Magento-Vary=([^;]+);*.*$\", \"\\1\"));\n    }\n\n    # To make sure http users don't see ssl warning\n    if (req.http.X-Forwarded-Proto) {\n        hash_data(req.http.X-Forwarded-Proto);\n    }\n\n\n    if (req.url ~ \"/graphql\") {\n        call process_graphql_headers;\n    }\n}\n\nsub process_graphql_headers {\n    if (req.http.X-Magento-Cache-Id) {\n        hash_data(req.http.X-Magento-Cache-Id);\n\n        # When the frontend stops sending the auth token, make sure users stop getting results cached for logged-in users\n        if (req.http.Authorization ~ \"^Bearer\") {\n            hash_data(\"Authorized\");\n        }\n    }\n\n    if (req.http.Store) {\n        hash_data(req.http.Store);\n    }\n\n    if (req.http.Content-Currency) {\n        hash_data(req.http.Content-Currency);\n    }\n}\n\nsub vcl_backend_response {\n\n    set beresp.grace = 3d;\n\n    if (beresp.http.content-type ~ \"text\") {\n        set beresp.do_esi = true;\n    }\n\n    if (bereq.url ~ \"\\.js$\" || beresp.http.content-type ~ \"text\") {\n        set beresp.do_gzip = true;\n    }\n\n    if (beresp.http.X-Magento-Debug) {\n        set beresp.http.X-Magento-Cache-Control = beresp.http.Cache-Control;\n    }\n\n    # cache only successfully responses and 404s that are not marked as private\n    if (beresp.status != 200 &amp;&amp;\n            beresp.status != 404 &amp;&amp;\n            beresp.http.Cache-Control ~ \"private\") {\n        set beresp.uncacheable = true;\n        set beresp.ttl = 86400s;\n        return (deliver);\n    }\n\n    # validate if we need to cache it and prevent from setting cookie\n    if (beresp.ttl &gt; 0s &amp;&amp; (bereq.method == \"GET\" || bereq.method == \"HEAD\")) {\n        unset beresp.http.set-cookie;\n    }\n\n   # If page is not cacheable then bypass varnish for 2 minutes as Hit-For-Pass\n   if (beresp.ttl &lt;= 0s ||\n       beresp.http.Surrogate-control ~ \"no-store\" ||\n       (!beresp.http.Surrogate-Control &amp;&amp;\n       beresp.http.Cache-Control ~ \"no-cache|no-store\") ||\n       beresp.http.Vary == \"*\") {\n        # Mark as Hit-For-Pass for the next 2 minutes\n        set beresp.ttl = 120s;\n        set beresp.uncacheable = true;\n   }\n\n   # If the cache key in the Magento response doesn't match the one that was sent in the request, don't cache under the request's key\n   if (bereq.url ~ \"/graphql\" &amp;&amp; bereq.http.X-Magento-Cache-Id &amp;&amp; bereq.http.X-Magento-Cache-Id != beresp.http.X-Magento-Cache-Id) {\n      set beresp.ttl = 0s;\n      set beresp.uncacheable = true;\n   }\n\n    return (deliver);\n}\n\nsub vcl_deliver {\n    if (resp.http.x-varnish ~ \" \") {\n        set resp.http.X-Magento-Cache-Debug = \"HIT\";\n        set resp.http.Grace = req.http.grace;\n    } else {\n        set resp.http.X-Magento-Cache-Debug = \"MISS\";\n    }\n\n    # Not letting browser to cache non-static files.\n    if (resp.http.Cache-Control !~ \"private\" &amp;&amp; req.url !~ \"^/(pub/)?(media|static)/\") {\n        set resp.http.Pragma = \"no-cache\";\n        set resp.http.Expires = \"-1\";\n        set resp.http.Cache-Control = \"no-store, no-cache, must-revalidate, max-age=0\";\n    }\n\n    if (!resp.http.X-Magento-Debug) {\n        unset resp.http.Age;\n    }\n    unset resp.http.X-Magento-Debug;\n    unset resp.http.X-Magento-Tags;\n    unset resp.http.X-Powered-By;\n    unset resp.http.Server;\n    unset resp.http.X-Varnish;\n    unset resp.http.Via;\n    unset resp.http.Link;\n}\n\nsub vcl_hit {\n    if (obj.ttl &gt;= 0s) {\n        # Hit within TTL period\n        return (deliver);\n    }\n    if (std.healthy(req.backend_hint)) {\n        if (obj.ttl + 300s &gt; 0s) {\n            # Hit after TTL expiration, but within grace period\n            set req.http.grace = \"normal (healthy server)\";\n            return (deliver);\n        } else {\n            # Hit after TTL and grace expiration\n            return (restart);\n        }\n    } else {\n        # server is not healthy, retrieve from cache\n        set req.http.grace = \"unlimited (unhealthy server)\";\n        return (deliver);\n    }\n}\n</code></pre>"},{"location":"varnish/configuration/#nginxsiteswebsiteconf","title":"nginx/sites/website.conf","text":"<p>W katalogu dockera <code>nginx</code> utw\u00f3rz plik <code>website.conf</code> z konfiguracj\u0105 serwera nginx.</p> Uwaga <p>Skonfiguruj nas\u0142uchiwanie na port <code>8080</code>. </p> Przyk\u0142ad konfiguracji pliku <code>website.conf</code> CONF <pre><code>map $cookie_XDEBUG_SESSION $phpserver {\n   default magento246_php:9000;\n   xdebug magento246_php_xdebug:9000;\n}\n\nserver {\n   listen 8080;\n   server_name magento.localhost;\n   ssl_certificate     /etc/nginx/certs/nginx.crt;\n   ssl_certificate_key /etc/nginx/certs/nginx.key;\n   set $MAGE_ROOT /home/aurora/workspace/magento246;\n   set $MAGE_RUN_TYPE website; #or set $MAGE_RUN_TYPE store;\n   set $MAGE_RUN_CODE base;\n\n   add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n   location / {\n       include /etc/nginx/magento.nginx.conf;\n   }\n}\n\nserver {\n   listen 443 ssl http2;\n   server_name magento.localhost;\n   ssl_certificate     /etc/nginx/certs/nginx.crt;\n   ssl_certificate_key /etc/nginx/certs/nginx.key;\n   set $MAGE_ROOT /home/aurora/workspace/magento246;\n   set $MAGE_RUN_TYPE website; #or set $MAGE_RUN_TYPE store;\n   set $MAGE_RUN_CODE base;\n\n   add_header Strict-Transport-Security \"max-age=63072000\" always;\n\n   location / {\n       include /etc/nginx/magento.nginx.conf;\n   }\n}\n</code></pre>"},{"location":"varnish/configuration/#magento-2","title":"Magento 2","text":"<p>W Panelu Administracyjnym Magento 2 przejd\u017a do <code>Stores</code> -&gt; <code>Configuration</code> -&gt; <code>Advanced</code> -&gt; <code>System</code> -&gt; <code>Full Page Cache</code> -&gt; <code>Caching Application</code> i ustaw <code>Varnish Cache</code>.</p>"},{"location":"varnish/configuration/#etchosts","title":"/etc/hosts","text":"<p>Upewnij si\u0119, \u017ce wpis do pliku <code>/etc/hosts</code> kieruje domen\u0119 na lokalny adres IP <code>127.0.0.1</code>.</p>"},{"location":"varnish/","title":"Czym jest Varnish?","text":"<p>Varnish w Magento 2 pe\u0142ni rol\u0119 zaawansowanego systemu cache'owania, kt\u00f3ry przyspiesza czas \u0142adowania strony i odci\u0105\u017ca serwer aplikacji. Dzia\u0142a jako proxy odwrotne (reverse proxy), przechowuj\u0105c kopie stron HTML w pami\u0119ci podr\u0119cznej i serwuj\u0105c je bezpo\u015brednio u\u017cytkownikom, zamiast ka\u017cdorazowo generowa\u0107 je z Magento. Varnish obs\u0142uguje r\u00f3wnie\u017c nag\u0142\u00f3wki HTTP i regu\u0142y cache'owania, co umo\u017cliwia precyzyjne zarz\u0105dzanie tym, co i kiedy jest przechowywane w cache. Dzi\u0119ki Varnishowi Magento 2 mo\u017ce obs\u0142ugiwa\u0107 wi\u0119ksz\u0105 liczb\u0119 jednoczesnych u\u017cytkownik\u00f3w, poprawiaj\u0105c wydajno\u015b\u0107 i skalowalno\u015b\u0107 sklepu internetowego.</p>"},{"location":"varnish/working_test/","title":"Sprawdzenie dzia\u0142ania","text":"<ol> <li>W terminalu uruchom komend\u0119 <code>curl -I http://domena.local</code> lub wejd\u017a na stron\u0119 <code>http://domena.local</code> w przegl\u0105darce.</li> <li>W odpowiedzi zobaczysz nag\u0142\u00f3wek <code>X-Magento-Cache-Debug</code> z informacj\u0105 o cache'owaniu:<ul> <li><code>HIT</code> - strona zosta\u0142a zwr\u00f3cona z cache.</li> <li><code>MISS</code> - strona zosta\u0142a zwr\u00f3cona z serwera.</li> </ul> </li> </ol>"}]}